

                Руководство по JUnit.Введение.
    Unit-тестирование - это тестирование , которые пишутся непосредственно на уровне разработчика(тестирование
определенной сущности - метод или класс).

Юнит тестирование делится на две большие группы:

    - Ручное тестирование
    - Автоматизированное тестирование

Ручное тестирвание тестов без помощи каких-либо средств.
Автоматическое тестирование - использование специальных средств для автомтизированного тестирования.

Главная идея данного фреймворка - сначала тесты, потом код. Это означает , что сначала мы определяем, что должно
получиться в результате работы того или иного куска кода и пишем тесты, которые проверяют идентичность результата
с требуемым , после чего пишем сам кусок кода , который и будем тестировать. Данный подход увечивает эффективность
работы разработчика и позволяет писать более стабильный код. В результате этого мы получаем меньшее количество времени ,
которое затрачивается на отладку программы.

    Свойства JUnit:

    - Фреймворк с открытым исходным кодом, который используется для написания и выполнения тестов.
    - Позволяет писать код более быстро и качественно.
    - Крайне прост в использовании .
    - Поддерживает аннотации для идентификации методов.
    - Поддерживает утверждения для тестирования получаемых результатов.
    - Тесты могут быть организованы в связки тесто (test suites)
    - Имеет визуальную индикацию состояния тестов (красные - не пройдены, зеленые - пройдены).

Тестовый случай (Test case) в юнит тестировании - это часть кода, которая проверяет, что другая часть кода ( в чатсности
метод) работает в соответствии с определенными требованиями.

Формально описанный тестовый случай характеризуется известными входными данными и ожидаемым выводом прграммы, который
известен до начала выполнентя теста.

Необходимо создавать как минимум два тестовых случая для каждого требования - положительный и отрицательный. Если
требование имеет под требования, то каждое из них должно тестироваться отдельно.

                        Аннотации.

Аннотации представляют собой , своего рода , теги, которые мы добавляем в код и применяем их к классам и методам.
По значению мы можем их разделить на следующие группы:

    - игнорируют методы и классы
    - запускаются перед и после всех методов
    - запускаюстя до и после всех тестовых методов

@Test - Указывает , что данный метод (public void) может быть запущен, как тестовый случай.Здесь размещаются сами
        проверки . Кроме того, у данной аннотации есть два параметра, expected - задает одидаемое исключение и timeout
        задает время, по истечению которого тест считается провалившимся.

@Before - Методы с данной аннотацией запускаются перед каждым тестом. Здесь обычно размещаются предустановка для теста.
          Генерация тестовыъ данных и т.д.

@After - Методы с данной аннотацией запускаются после каждого теста.Здесь размещаются операции освобождения ресурсов
         после теста.

@BeforeClass - Запускаются один раз перед запуском любого тестового метода в классе (метод должен быть public static).
               Обозначают методы , которые будут вызваны до создания экземпляра тест-класса. Имеет смысл размещать
               предустановки для теста в случае, когда класс содержит несколько тестов использующих различные
               предустановки , либо когда несколько тесто используют одни и те же данные, чтобы не тратить время на их
               создание для каждого теста

@AfterClass - Запускаются один раз после запуска любого тестового метода в классе (метод должен быть статическим).

@Ignore - Тестовые методы с данной аннотацией не будут выполнены. Если какой-либо тест по какой-либо серьезной причине
          нужно отключить (например этот тест постоянно валится , но его исправление отложено до светлого будущего) его
          можно зааннотировать @Ignore. Также, если поместить эту аннотацию на класс, то все тесты в этом классе будут
          отключены.


                                    Правила.

Правила это некое подобие утилит для тестов, которые добавляют функционал до и после выполнения теста.
Например есть встроенные праавила для заданий таймаута для теста(Timeout), для задания ожидаемых исключений
(ExpectedExceptoin), длч работы с временными файлами (TemporaryFolder) и д.р. Для объявления правила необходима создать
public не static  поле типа провзиодного от MethodRule и зааннотировать его с помощью @Rule.



