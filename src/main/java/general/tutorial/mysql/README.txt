                                        MySQL сервер базы данных.


    Управление соединениями и безопасность.

    Для каждого клиентского соединения выделяется отдельный поток внутри процесса сервера. Запросы по данному соединению
 исполняются в пределах этого потока, который в свою очередь, выполняется одним ядром или процессором. Сервер кэширует
 потоки , так что их не нужно создавать или уничтожать для каждого нового соединения.

    Когда клиенты(приложения) подключаются к серверу MySQL, сервер должен их идентифицировать. Идентификация основывается
на имени пользователя, адресе хоста, с которого происходит соединение, и пароле. После того как клиент подключился , для
каждого запроса сервер проверяет наличие необходимых привилегий(напр. разрешена ли команда SELECT применителько к табоице
COuntry базы данных world) .

    Оптимизация и выполнение.

    MySQL осуществляет синтаксический разбор запросов для создания внутренней структуры(дерева разбора), а затем выполняет
ряд оптимизаций. В их число входят переписывание запроса, определение порядка чтения таблиц , выбор используемых индексов
и т.п. Вы можете повлиять на работу оптимизатора, включив в запрос специальные ключевые слов-подсказки(hints).
Поскольку MySQL предлагает несколько подсистем хранения, нет необходимости принимать единственно решение на все случаи
жизни.

    Табличные блокировки.

    Основной стратегией блкировки в MySQL , дающей наименьшие накладные расходы, является табличная блокировка. Такая
блокировка аналогична вышеописанным блокировкам почтового ящика: она блкирет всю таблицу. Когда клиент хочет выполнить
запись в таблицу, он захватыват блокировку на запись для всей таблицы. Такая блокировка предотвращает все остальные
операции чтения и записи. В тот момент, когда никто не призоводит запись , любой клиент может получить блокировку на
чтение и она не будет конфликтовать сдругими аналогичными блокировками.

    Блокировки строк.

    Наибольшие возможности совместного доступа (и наибольшие накладные расходы) дают блокировки строк. Блокировка на
уровне строк доступна, среди прочих, в подсистемах хранения данных InnoDB и Falcon. Блокировки строк реализуются
подсистемами хранения данных, а не сервером. Сервер ничего не знает о блокировках, реализованных подсистемой хранения
данных, и , как увидите ниже в этой глав и в остальных разделах книги, все подсистемы хранения данных реализуют блокировки
по-своему.

                                            Транзакции.

    Транзакцией называется атомарная группа запросов SQL, т.е. которые рассматриваются как единое целое. Если подсистема
базы данных может выполнить всю группу запросов , она делает это, но если любой из запросов не может быть выполнен в
результате сбоя или по какой-то другой причине, не будет выполнен ни один запрос группы. Все или ничего.

Транзакций недостаточно , если система не проходит тест ACID. Аббревиатура ACID расшифровывается как Atomicity,
Consistency, Isolation и Durability(Атомарность , непротиворечивость, изолированность и долговечность).

    Атомарность.

    Транзакция должна функционировать как единая неделимая единица работы таким образом, чтобы вся транзакция была либо
выполнена, либо отменена. Когда транзакции яаляются атомарными, не существует такого понятия , как частично выполненная
транзакция: все или ничего.

    Непротеворичивость.

    База данных должна всегда перезодить из одного непротиворечивого состояния в последующее. В нашем примере непротиво-
речивость гарантирует, что сбой между третьей и четвертой строками не приведет к исчезновению $200 с текущего счета.
Поскольку транзакция не будет зафиксирована, ни одно из изменений в этой транзакции не будет отражено в базе данных.

    Изолированность.

    Результаты транзакции обычно невидимы другим транзакциям, пока она не закончена. Это гарантирует, что если в нашем
примере программа суммирования остатков на банковских счетах будет запущена после третьей строки, но перед четверной,
она по прежнему увидит $200 на текущем счете.

    Долговечность

    Будучи зафиксированы , внесенные в ходе транзакции изменения становятся постоянными. Это означает , что изменения
должны быть записаны так, чтобы данные не могли быть потеряны в случае сбоя системы. Долговечность, однако является
несколько расплывчатой концепцией , поскольку на самом деле существует много уровней. Некоторые стратегии обеспечения
долговечности предоставляют более сильные гарантии безопасности, чем другие, и ни одна из них не является надежной на
100%.

    Транзакции ACID гарантируют , что банк не потеряет ваши деньги. Вообще очень сложно или даже невозможно сделать это
с помощью логики приложения. Чтобы обеспечить гарантии ACID, ACID - совместимый сервер баз данных должен выполнить
множество сложных действий.

    Сервер базы данных с транзакциями ACID обычно требует большей мощности процессора , объема памяти и дискового
пространства, чем без них.

    Компания MySQL AB предоставляет пользователям три транзакционных подсистемы хранения данных : InnoDB, NDB Cluster
и Falcon.

    Режим AUTOCOMMIT.

    MySQL по умолчанию работает в режиме AUTOCOMMIT. Это означает , что если вы не начали транзакцию явным образом,
каждый запрос автоматически выполняется в отдельной транзакции. Вы можете включить или отключить режим AUTOCOMMIT для
текущего соединения, установив следующее значение конфигурационной переменной:


    Совместное использование различных подсистем хранения данных в транзакциях.

    MySQL не управляет транзакциями на уровне сервера. Сами транзакции реализуются подсистемами хранения данных. Это
означает , что вы не можете надежно сочетать различные подсистемы в одной транзакции.


